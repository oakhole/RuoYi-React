import {FileExcelOutlined, PlusOutlined} from '@ant-design/icons';
import {Button, Modal, Popconfirm} from 'antd';
import React, {useEffect, useRef, useState} from 'react';
import {FormattedMessage, useAccess, useIntl} from '@umijs/max';

import {FooterToolbar, PageContainer} from '@ant-design/pro-components';
import type {ActionType, ProColumns} from '@ant-design/pro-components';
import { ProTable } from '@ant-design/pro-components';
import type { ProFormInstance } from '@ant-design/pro-components';
import {add${ClassName}, export${ClassName}, get${ClassName}List, remove${ClassName}, update${ClassName}} from './service';
import ${ClassName}Form from './Form';
import type { ${ClassName} } from './data.d';

const ${ClassName}TableList: React.FC = () => {
    // ProTable 组件操作引用
    const actionRef = useRef<ActionType>();

    // ProTable 查询表单引用
    const formRef = useRef<ProFormInstance>();

    // 选中状态
    const [currentRow, setCurrentRow] = useState<${ClassName}>();
    const [selectedRows, setSelectedRows] = useState<${ClassName}[]>([]);

    // 显示状态
    const [modalVisible, setModalVisible] = useState<boolean>(false);

    // 字典数据

    // 页面权限
    const access = useAccess();

    // 国际化
    const intl = useIntl();

    // 页面渲染初始化数据
    useEffect(() => {
    }, []);

    const columns: ProColumns<${ClassName}>[] = [
        #foreach ($column in $columns)
            #set($sorter="false")
            #if($column.javaType == "Integer")
                #set($valueType="digit")
                #set($sorter="true")
                #set($width="80")
                #set($ellipsis="false")
            #elseif($column.javaType == "Long")
                #set($valueType="text")
                #set($sorter="true")
                #set($width="120")
                #set($ellipsis="false")
            #elseif($column.javaType == "BigInteger")
                #set($valueType="digit")
                #set($sorter="true")
                #set($width="120")
                #set($ellipsis="false")
            #elseif($column.javaType == "BigDecimal")
                #set($valueType="digit")
                #set($sorter="true")
                #set($width="120")
                #set($ellipsis="false")
            #elseif($column.javaType == "Float")
                #set($valueType="digit")
                #set($sorter="true")
                #set($width="120")
                #set($ellipsis="false")
            #elseif($column.javaType == "Decimal")
                #set($valueType="digit")
                #set($sorter="true")
                #set($width="120")
                #set($ellipsis="false")
            #elseif($column.javaType == "Boolean")
                #set($valueType="select")
                #set($sorter="true")
                #set($width="80")
                #set($ellipsis="false")
            #elseif($column.javaType == "Date")
                #set($valueType="dateTime")
                #set($sorter="true")
                #set($width="120")
                #set($ellipsis="false")
                #if($column.queryType == "BETWEEN")
                #set($valueType="dateRange")
                #end
            #else
                #set($valueType="text")
                #set($ellipsis="true")
                #set($width="120")
                #set($ellipsis="false")
            #end
            #set($hideInSearch = !$column.query)
            #set($hideInTable = $table.isSuperColumn($column.javaField) || !$column.list)
            #if(!$table.isSuperColumn($column.javaField))
                {
                    title: <FormattedMessage id="${moduleName}.${businessName}.${column.javaField}"
                                             defaultMessage="${column.columnComment}"/>,
                    dataIndex: '$column.javaField',
                    hideInSearch: $hideInSearch,
                    hideInTable: $hideInTable,
                    valueType: '$valueType',
                    sorter: $sorter,
                    width: $width,
                    ellipsis: $ellipsis,
                    #if($valueType == 'digit')
                    align: 'right',
                    #else
                    align: 'center',
                    #end
                    #if($valueType == 'dateRange')
                    render: (_, record) => <span>{record.createTime}</span>,
                    search: {
                      transform: (value) => {
                        return {
                          'params[beginTime]': value[0],
                          'params[endTime]': value[1],
                        };
                      },
                    },
                    #end
                },
            #end
        #end
        {
            title: <FormattedMessage id="biz.common.column.createTime" defaultMessage="创建时间"/>,
            dataIndex: 'createTime',
            hideInSearch: true,
            sorter: true,
            defaultSortOrder: 'descend',
            width: 120,
            fixed: 'right',
            align: 'center',
            render: (_, record) => <span>{record.createTime}</span>,
            search: {
                transform: (value) => {
                    return {
                        'params[beginTime]': value[0],
                        'params[endTime]': value[1],
                    };
                },
            },            
        },
        {
            title: <FormattedMessage id="biz.common.column.remark" defaultMessage="备注信息"/>,
            dataIndex: 'remark',
            hideInSearch: true,
            hideInTable: true,
            ellipsis: true,
        },
        {
            title: <FormattedMessage id="pages.searchTable.titleOption" defaultMessage="操作"/>,
            dataIndex: 'option',
            width: 120,
            align: 'center',
            fixed: 'right',
            valueType: 'option',
            render: (_, record) => [
                <Button
                    type="link"
                    size="small"
                    key="edit"
                    hidden={!access.hasPerms('${moduleName}:${businessName}:edit')}
                    onClick={() => {
                        setModalVisible(true);
                        setCurrentRow(record);
                    }}
                >
                    <FormattedMessage id="pages.searchTable.edit" defaultMessage="编辑"/>
                </Button>,
                <Popconfirm
                    key="remove"
                    placement="top"
                    title={intl.formatMessage({
                        id: 'pages.searchTable.delete.confirm',
                        defaultMessage: '确定删除该项吗？',
                    })}
                    onConfirm={async () => {
                        const success = await remove${ClassName}(String(record.${pkColumn.javaField}));
                        if (success) {
                            setSelectedRows([]);
                            actionRef.current?.reloadAndRest?.();
                        }
                    }}
                    okText={intl.formatMessage({
                        id: 'pages.searchTable.delete.confirm.ok',
                        defaultMessage: '确认',
                    })}
                    cancelText={intl.formatMessage({
                        id: 'pages.searchTable.delete.confirm.cancel',
                        defaultMessage: '取消',
                    })}
                >
                    <Button
                        type="link"
                        size="small"
                        danger
                        key="remove"
                        hidden={!access.hasPerms('${moduleName}:${businessName}:remove')}
                    >
                        <FormattedMessage id="pages.searchTable.delete" defaultMessage="删除"/>
                    </Button>
                </Popconfirm>,
            ],
        },
    ];

    return (
        <PageContainer>
            <ProTable<${ClassName}>
                headerTitle={intl.formatMessage({
                    id: '${moduleName}.${businessName}.tableName',
                    defaultMessage: '${functionName}列表',
                })}
                actionRef={actionRef}
                formRef={formRef}
                rowKey="${pkColumn.javaField}"
                key="${className}List"
                search={{
                    labelWidth: 'auto',
                }}
                toolBarRender={() => [
                    <Button
                        type="text"
                        key="add"
                        hidden={!access.hasPerms('${moduleName}:${businessName}:add')}
                        onClick={async () => {
                            setCurrentRow(undefined);
                            setModalVisible(true);
                        }}
                    >
                        <PlusOutlined/> <FormattedMessage id="pages.searchTable.new" defaultMessage="新建"/>
                    </Button>,
                    <Button
                        type="text"
                        key="export"
                        hidden={!access.hasPerms('${moduleName}:${businessName}:export')}
                        onClick={async () => {
                            await export${ClassName}(formRef.current?.getFieldsFormatValue?.());
                        }}
                    >
                        <FileExcelOutlined/>{' '}
                        <FormattedMessage id="pages.searchTable.export" defaultMessage="导出"/>
                    </Button>,
                ]}
                request={(params, sort) => get${ClassName}List({...params}, sort)}
                columns={columns}
                rowSelection={{
                    onChange: (_, rows) => {
                        setSelectedRows(rows);
                    },
                }}
                scroll={{ x: ${columns.size()} * 120 }}
            />
            {selectedRows?.length > 0 && (
                <FooterToolbar
                    extra={
                        <div>
                            <FormattedMessage id="pages.searchTable.chosen" defaultMessage="已选择"/>
                            <a style={{fontWeight: 600}}>{selectedRows.length}</a>
                            <FormattedMessage id="pages.searchTable.item" defaultMessage="项"/>
                        </div>
                    }
                >
                    <Button
                        key="batchRemove"
                        danger
                        hidden={!access.hasPerms('${moduleName}:${businessName}:remove')}
                        onClick={async () => {
                            Modal.confirm({
                                title: intl.formatMessage({
                                    id: 'pages.searchTable.delete',
                                    defaultMessage: '删除',
                                }),
                                content: intl.formatMessage({
                                    id: 'pages.searchTable.delete.confirm',
                                    defaultMessage: '确定删除已选中项吗？',
                                }),
                                okText: intl.formatMessage({
                                    id: 'pages.searchTable.delete.confirm.ok',
                                    defaultMessage: '确认',
                                }),
                                cancelText: intl.formatMessage({
                                    id: 'pages.searchTable.delete.confirm.cancel',
                                    defaultMessage: '取消',
                                }),
                                onOk: async () => {
                                    await remove${ClassName}(selectedRows.map((row) => row.${pkColumn.javaField}).join(',')).then((res) => {
                                        if (res.success) {
                                            setSelectedRows([]);
                                            actionRef.current?.reloadAndRest?.();
                                        }
                                    });
                                },
                            });
                        }}
                    >
                        <FormattedMessage id="pages.searchTable.batchDeletion" defaultMessage="批量删除"/>
                    </Button>
                </FooterToolbar>
            )}
            <${ClassName}Form
                onSubmit={async (values) => {
                    const reloadFormList = () => {
                        setModalVisible(false);
                        setCurrentRow(undefined);
                        actionRef.current?.reload();
                    };
                    if (values.${pkColumn.javaField}) {
                        await update${ClassName}({...values} as ${ClassName}).then(
                            (res) => res.success && reloadFormList(),
                        );
                    } else {
                        await add${ClassName}({...values} as ${ClassName}).then((res) => res.success && reloadFormList());
                    }
                }}
                onCancel={() => {
                    setModalVisible(false);
                    setCurrentRow(undefined);
                }}
                visible={modalVisible}
                values={currentRow || {}}
            />
        </PageContainer>
    );
};

export default ${ClassName}TableList;